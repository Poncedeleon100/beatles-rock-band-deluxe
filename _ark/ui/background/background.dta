{new
   UIPanel
   background_panel
   (file background.milo)
   (slot0highlighted FALSE)
   (slot1highlighted FALSE)
   (slot2highlighted FALSE)
   (slot3highlighted FALSE)
   ;main_paul_george 1-2 ----- ;main_ringo 3 ----- ;main_john 4
   (sil_help
      {main_john.tex set_bitmap "ui/background/main_ringo_help.png"}
      {main_paul_george.tex set_bitmap "ui/background/main_paul_george_help.png"}
      {main_ringo.tex set_bitmap "ui/background/main_john_help.png"}
      ;main_paul_george 1-2
      {paul_george.mesh set_local_pos_index 0 -2.5} ;X
      {paul_george.mesh set_local_pos_index 2 -1.5} ;Y
      
      {paul_george.mesh set_local_scale_index 0 .09} ;X
      {paul_george.mesh set_local_scale_index 1 .09} ;Y
      ;main_ringo 3
      {main_ringo.mesh set_local_pos_index 0 2.7} ;X
      {main_ringo.mesh set_local_pos_index 2 -1.4} ;Y
      
      {main_ringo.mesh set_local_scale_index 0 .05} ;X
      {main_ringo.mesh set_local_scale_index 1 .1} ;Y
      ;main_john 4
      {main_john.mesh set_local_pos_index 0 5.45} ;X
      {main_john.mesh set_local_pos_index 2 -1.6} ;Y
      {main_john.mesh set_local_scale_index 0 .043} ;X
      {main_john.mesh set_local_scale_index 1 .043} ;Y
      
      {main_paul_george.mat set alpha_cut TRUE}
      {main_ringo.mat set alpha_cut TRUE}
      {main_john.mat set alpha_cut TRUE}
      
      {main_mic.mesh set_showing FALSE}
      {if {exists hue_shift} ;check if the hue task is already running
         {delete hue_shift} ;delete it if it is running
      }
      {$this hue_shift} ;run the hue shift task
   )
   (sil_vanilla
      {main_john.tex set_bitmap "ui/background/main_john.png"}
      {main_paul_george.tex set_bitmap "ui/background/main_paul_george.png"}
      {main_ringo.tex set_bitmap "ui/background/main_ringo.png"}
      ;main_paul_george 1-2
      {paul_george.mesh set_local_pos_index 0 -2.5} ;X
      {paul_george.mesh set_local_pos_index 2 -2} ;Y
      
      {paul_george.mesh set_local_scale_index 0 .065} ;X
      {paul_george.mesh set_local_scale_index 1 .065} ;Y
      ;main_ringo 3
      {main_ringo.mesh set_local_pos_index 0 2.5} ;X
      {main_ringo.mesh set_local_pos_index 2 -2.2} ;Y
      
      {main_ringo.mesh set_local_scale_index 0 .05} ;X
      {main_ringo.mesh set_local_scale_index 1 .05} ;Y
      ;main_john 4
      {main_john.mesh set_local_pos_index 0 5.85} ;X
      {main_john.mesh set_local_pos_index 2 -.7} ;Y
      {main_john.mesh set_local_scale_index 0 .033} ;X
      {main_john.mesh set_local_scale_index 1 .063} ;Y
      
      {main_paul_george.mat set alpha_cut TRUE}
      {main_ringo.mat set alpha_cut TRUE}
      {main_john.mat set alpha_cut TRUE}
      
      {main_mic.mesh set_showing TRUE}
      
      {if {exists hue_shift} ;check if the hue task is already running
         {delete hue_shift} ;delete it if it is running
      }
      {$this hue_shift} ;run the hue shift task
   )
   (sil_abbey
      {main_john.tex set_bitmap "ui/background/main_ringo_abbey.png"}
      {main_paul_george.tex set_bitmap "ui/background/main_paul_george_abbey.png"}
      {main_ringo.tex set_bitmap "ui/background/main_john_abbey.png"}
      ;main_paul_george 1-2
      {paul_george.mesh set_local_pos_index 0 -2.5} ;X
      {paul_george.mesh set_local_pos_index 2 -0.7} ;Y
      
      {paul_george.mesh set_local_scale_index 0 .09} ;X
      {paul_george.mesh set_local_scale_index 1 .09} ;Y
      ;main_ringo 3
      {main_ringo.mesh set_local_pos_index 0 5.7} ;X
      {main_ringo.mesh set_local_pos_index 2 -.5} ;Y
      
      {main_ringo.mesh set_local_scale_index 0 .05} ;X
      {main_ringo.mesh set_local_scale_index 1 .1} ;Y
      ;main_john 4
      {main_john.mesh set_local_pos_index 0 1.9} ;X
      {main_john.mesh set_local_pos_index 2 -1.6} ;Y
      {main_john.mesh set_local_scale_index 0 .05} ;X
      {main_john.mesh set_local_scale_index 1 .05} ;Y
      
      {main_paul_george.mat set alpha_cut TRUE}
      {main_ringo.mat set alpha_cut TRUE}
      {main_john.mat set alpha_cut TRUE}
      
      {main_mic.mesh set_showing FALSE}
      {if {exists hue_shift} ;check if the hue task is already running
         {delete hue_shift} ;delete it if it is running
      }
      {$this hue_shift} ;run the hue shift task
   )
   (apply_hue_shift
      {$this iterate Environ $l {$l set hue $hueshift}} ;actually applying the hue shift after we run the math in the below script task
   )
   (hue_shift
      {thread_task
            kTaskSeconds
            (name hue_shift) ;name the task so we can delete it later
            (script
               {set $hueshift {$huemath $hueshift 1}} ;add or subtract the current hue
               {if {> $hueshift 180} ;check if we are above the allowed threshold
                  {set $hueshift -180} ;setting it to the inverse allows it to seamlessly loop
               }
               {if {< $hueshift -180} ;check if we are below the allowed threshold
                  {set $hueshift 180} ;setting it to the inverse allows it to seamlessly loop
               }
               {background_panel apply_hue_shift} ;run the hue shift in it's own block above
               {$task sleep .1} ;wait for a lil bit
               {$task loop} ;loop this script
            )
      }
   )
   (random_cutout
      {set $cutout_to_use {random_int 0 3}} ;randomly determine which cutout to use
      {if_else {== $cutout_to_use $lastusedcutout} ;if the new cutout matches the last cutout we used
         {$this random_cutout} ;loop random again to try for a new cutout
         {$this apply_cutout} ;once we have a new cutout, load it
      }
   )
   (apply_cutout
      ;{switch $cutout_to_use ;check which cutout we want to use
      ;   (0 {$this sil_abbey} {set $lastusedcutout 0}) ;use it, and track it as the last used cutout
      ;   (1 {$this sil_help} {set $lastusedcutout 1})
      ;   (2 {$this sil_vanilla} {set $lastusedcutout 2})
      ;   kDataUnhandled ;failsafe in case we get an invalid number
      ;}
      {$this sil_help}

   )
   (enter
      {watercolor.mesh set_showing FALSE}
      {watercolor_matchmaking.mesh set_showing FALSE}
      {watercolor_story_hub.mesh set_showing FALSE}
      {watercolordifficulty01.mesh set_showing FALSE}
      {watercolorsongselect.mesh set_showing FALSE}
      ;{$this iterate ParticleSys $l {$l set max_parts 10}}
      {$this iterate Mat $m {$m set use_environ TRUE}} ;allow the materials to be affected by the environment color
      {$this iterate Mat $m {$m set color_adjust TRUE}} ;allow the materials to be affected by the environment color
      {set $hueaddition {random_int 0 2}} ;randomly decide whether to add or subtract in the hue_shift task
      {if_else $hueaddition ;check what we got
         {set $huemath '-'} ;set hue shift to subtract
         {set $huemath '+'} ;set hue shift to add
      }
      {$this random_cutout} ;initiate picking a cutout
      
      ;{beatles_logo.tex set_bitmap "ui/background/beatles_dx.png"} ;set the logo
      
      ;this was trying to replicate a mesh as a new mesh. didnt work.
      ;{beatles_logo.mesh set_name beatles_logo2.mesh main_1}
      ;{beatles_logo.grp add_object beatles_logo2.mesh}
      ;{beatles_logo2.mesh set_showing TRUE}
      ;{beatles_logo2.mesh set mat main_ringo.mat}
      ;{beatles_logo2.mesh set_local_scale 2 2 2}
      ;{beatles_logo2.mesh set_local_pos 2 2 2}
   )
   (exit
      {if {exists hue_shift} ;check if the hue task is already running
         {delete hue_shift} ;delete it if it is running
      }
   )
   (setup_screen
      {if
         {{ui current_screen}
            has
            (background_view)}
         {do
            ($bg_dir
               {$this loaded_dir})
            ($screen
               {ui current_screen})
            ($viewname
               {$screen get background_view})
            ($view
               {$bg_dir find $viewname})
            {if
               $view
               {$screen
                  foreach_panel
                  $panel
                  {do
                     ($dir
                        {$panel loaded_dir})
                     {if
                        {&&
                           $dir
                           {!
                              {== $dir $bg_dir}}}
                        {$bg_dir place_in_view $dir $view}
                        {$dir
                           set
                           cam
                           {$bg_dir get cam}}
                        {$dir
                           iterate
                           PanelDir
                           $proxy
                           {$proxy
                              set
                              cam
                              {$bg_dir get cam}}}}}}}
             }
             })
   (unload
      {{$this loaded_dir}
         set
         current_view
         ""})
   (highlight_slot
      ($slot)
      {unless
         {$this get_highlighted $slot}
         {$this set_highlighted $slot TRUE}
         {{sprintf
               "match_curves%iR.anim"
               {'+' $slot 1}}
            stop_animation}
         {{sprintf
               "match_slot0%i.trg"
               {'+' $slot 1}}
            trigger}})
   (unhighlight_slot
      ($slot)
      {if
         {$this get_highlighted $slot}
         {$this set_highlighted $slot FALSE}
         {{sprintf
               "match_curves%i.anim"
               {'+' $slot 1}}
            stop_animation}
         {{sprintf
               "match_slot0%iR.trg"
               {'+' $slot 1}}
            trigger}})
   (clear_slot_highlights
      {match_curves1.anim stop_animation}
      {match_curves2.anim stop_animation}
      {match_curves3.anim stop_animation}
      {match_curves4.anim stop_animation}
      {match_slot01R.trg play_end_of_anims}
      {match_slot02R.trg play_end_of_anims}
      {match_slot03R.trg play_end_of_anims}
      {match_slot04R.trg play_end_of_anims}
      {$this set_highlighted 0 FALSE}
      {$this set_highlighted 1 FALSE}
      {$this set_highlighted 2 FALSE}
      {$this set_highlighted 3 FALSE})
   (get_highlighted
      ($slot)
      {switch
         $slot
         (0
            [slot0highlighted])
         (1
            [slot1highlighted])
         (2
            [slot2highlighted])
         (3
            [slot3highlighted])})
   (set_highlighted
      ($slot $highlighted)
      {switch
         $slot
         (0
            {set
               [slot0highlighted]
               $highlighted})
         (1
            {set
               [slot1highlighted]
               $highlighted})
         (2
            {set
               [slot2highlighted]
               $highlighted})
         (3
            {set
               [slot3highlighted]
               $highlighted})})}